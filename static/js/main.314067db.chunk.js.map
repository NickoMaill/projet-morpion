{"version":3,"sources":["components/Button.js","components/Grid.js","App.js","reportWebVitals.js","index.js"],"names":["Button","_this","Object","classCallCheck","this","_super","call","state","react_default","a","createElement","className","type","style","display","onClick","props","onclick","disabled","id","React","Component","Grid","player1","player2","player1Turn","displayP1Won","displayP2Won","displayDraw","displayRESTART","clickedBtns","checkedBtnPlayer1","checkedBtnPlayer2","winner","winningLines","handleClick","bind","assertThisInitialized","checkIfWinP1","checkIfWinP2","handleReset","_this2","map","line","containsAll","every","elem","includes","setState","_loop","i","document","querySelectorAll","forEach","button","background","length","console","log","_this3","_loop2","e","_this4","target","value","setTimeout","copyArray2","concat","toConsumableArray","copyArray1","copyClickedBtns","push","_prevProps","prevState","components_Button","iconify","icon","inline","App","components_Grid","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.314067db.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Button extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          className={`btn btn-light m-1 border round-4 square`}\r\n          type=\"button\"\r\n          style={{ display: \"block\" }}\r\n          onClick={this.props.onclick}\r\n          disabled={this.props.disabled}\r\n          id={this.props.id}\r\n        ></input>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//Fin button\r\n\r\nexport default Button;\r\n","// ---------------------------------- IMPORTS -----------------------------------\r\nimport React from \"react\";\r\nimport Button from \"./Button\";\r\nimport { Icon } from '@iconify/react'; // Cats icons (Copyright Concats)\r\n\r\n\r\nclass Grid extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      player1: \"X\", // Player 1\r\n      player2: \"O\", // Player 2\r\n      player1Turn: true, //Boolean to alternate between player 1 and Player 2\r\n\r\n      //Changing the display of our text in the render dynamically, \r\n      //according to the game scenarios :\r\n      display: \"none\",\r\n      displayP1Won: \"none\",\r\n      displayP2Won: \"none\",\r\n      displayDraw: \"none\",\r\n      displayRESTART: \"none\",\r\n      clickedBtns: [],\r\n      checkedBtnPlayer1: [], //Player 1's history of checked buttons\r\n      checkedBtnPlayer2: [], //Player 2's history of checked buttons\r\n      disabled: false,\r\n      winner: false, //Boolean to check if a player has won \r\n\r\n      //List of the winning combination lines : \r\n      winningLines: [\r\n        [\"0\", \"1\", \"2\"],\r\n        [\"3\", \"4\", \"5\"],\r\n        [\"6\", \"7\", \"8\"],\r\n        [\"0\", \"3\", \"6\"],\r\n        [\"1\", \"4\", \"7\"],\r\n        [\"2\", \"5\", \"8\"],\r\n        [\"0\", \"4\", \"8\"],\r\n        [\"2\", \"4\", \"6\"],\r\n      ],\r\n    };\r\n\r\n    //Bind functions\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.checkIfWinP1 = this.checkIfWinP1.bind(this);\r\n    this.checkIfWinP2 = this.checkIfWinP2.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n  }\r\n\r\n  // ---------------------------------- FUNCTIONS -----------------------------------\r\n\r\n  //Creating 2 functions that will create our users history of checked buttons (checkedBtnPlayer1 and checkedBtnPlayer2 arrays) and check if they contain any winning line at at every turn : the first user that has any of the winning lines wins and the game ends.\r\n  \r\n  //Function to check if Player 2 has won : \r\n  checkIfWinP2() {\r\n\r\n    //Creating a map method that will iterate into the array of winning lines and check if any of them are inside the array of player 2's clicked buttons (checkedBtnPlayer2) : if so, the const containsAll return True, if not, it returns False :\r\n    this.state.winningLines.map((line) => {\r\n      const containsAll = line.every((elem) => {\r\n        return this.state.checkedBtnPlayer2.includes(elem);\r\n      });\r\n\r\n      //If the variable containsAll returns True, a winning notification get displayed in the page :\r\n      if (containsAll === true) {\r\n        this.setState({\r\n          displayP2Won: \"initial\",\r\n          displayRESTART: \"initial\",\r\n          displayDraw: \"none\",\r\n          winner: true,\r\n        });\r\n        //Creating a loop that will check every button : if it's part of the winning line, the background color turns into green : \r\n        for (let i = 0; i < line.length; i++) {\r\n          let id = line[i];\r\n          let allButtons = document.querySelectorAll(\"input\");\r\n\r\n          allButtons.forEach((button) => {\r\n            if (button.id === id) {\r\n              button.style.background = \"rgba(26, 175, 73, 0.5)\";\r\n            }\r\n          });\r\n        }\r\n        return console.log(\" Bravo ! Player 2 a gagné \", containsAll);\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n  //Function to check if Player 1 has won : \r\n  checkIfWinP1() {\r\n\r\n    //Creating a map method that will iterate into the array of winning lines and check if any of them are inside the array of player 1's clicked buttons (checkedBtnPlayer1) : if so, the const containsAll return True, if not, it returns False :\r\n    this.state.winningLines.map((line) => {\r\n      const containsAll = line.every((elem) => {\r\n        return this.state.checkedBtnPlayer1.includes(elem);\r\n      });\r\n      if (containsAll === true) {\r\n        this.setState({\r\n          displayP1Won: \"initial\",\r\n          displayRESTART: \"initial\",\r\n          displayDraw: \"none\",\r\n          winner: true,\r\n        });\r\n\r\n        //Creating a loop that will check every button : if it's part of the winning line, the background color turns into red : \r\n        for (let i = 0; i < line.length; i++) {\r\n          let id = line[i];\r\n          let allButtons = document.querySelectorAll(\"input\");\r\n\r\n          allButtons.forEach((button) => {\r\n            if (button.id === id) {\r\n              button.style.background = \"rgba(175, 26, 26, 0.4)\";\r\n            }\r\n          });\r\n        }\r\n\r\n        return console.log(\" Bravo ! Player 1 a gagné \", containsAll);\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  handleClick(e) {\r\n    //If the button's value is not empty, it means that the button is already clicked => the user can't select it and gets an error message :\r\n    if (e.target.value !== \"\") {\r\n      return this.setState(\r\n        {\r\n          display: \"initial\",\r\n        },\r\n        () => { //Creating a setTimeOut method to remove the error message after 2 seconds : \r\n          setTimeout(() => {\r\n            this.setState({ display: \"none\" });\r\n          }, 1900);\r\n        }\r\n      );\r\n    }\r\n    //---------------- PLAYER 2 -----------------\r\n\r\n    // Creating a condition to check whose turn it is (Player1's turn or Player2's turn): if the boolean Player1Turn is true, it means that the next move will be a \"X\" for Player 1. If Player1Turn is false, the next move will be a \"O\" for Player 2: \r\n\r\n    if (this.state.player1Turn === false) {\r\n      const copyArray2 = [...this.state.checkedBtnPlayer2, e.target.id];\r\n      this.setState(\r\n        {\r\n          player1Turn: true,\r\n        },\r\n        () => {\r\n          this.setState({ checkedBtnPlayer2: copyArray2 }, () => {\r\n            console.log(\"test Array player2: \", this.state.checkedBtnPlayer2);\r\n            e.target.value = this.state.player2;\r\n            e.target.className = \"styleO m-1 border\"; //style for O\r\n            this.checkIfWinP2();\r\n          });\r\n        }\r\n      );\r\n      //---------------- PLAYER 1 ----------------\r\n    } else if (this.state.player1Turn === true) {\r\n      const copyArray1 = [...this.state.checkedBtnPlayer1, e.target.id];\r\n      this.setState(\r\n        {\r\n          player1Turn: false,\r\n        },\r\n        () => {\r\n          this.setState({ checkedBtnPlayer1: copyArray1 }, () => {\r\n            console.log(\"test Array player1: \", this.state.checkedBtnPlayer1);\r\n            e.target.value = this.state.player1;\r\n            e.target.className = \"styleX m-1 border\"; //style for X\r\n            this.checkIfWinP1();\r\n          });\r\n        }\r\n      );\r\n    }\r\n    const copyClickedBtns = this.state.clickedBtns; //Creating a copy of the clicked buttons's array\r\n    copyClickedBtns.push(e.target.id); //Adding the last clicked button to our copy array\r\n    this.setState({ clickedBtns: copyClickedBtns }); // replacing our clicked buttons array with our updated copyArray\r\n\r\n    // Checking if the clicked buttons array is full (i.e, if it contains oll of our button) and if we do not have ana winner : if so, we get a draw and the game is over. => a \"RESTART\" button is displayed \r\n    \r\n    if (this.state.clickedBtns.length === 9 && this.state.winner === false) {\r\n      this.setState({ displayRESTART: \"initial\", displayDraw: \"initial\" });\r\n      console.log(\"match nul\");\r\n    }\r\n  }\r\n\r\n  //Checking if we have a winner : if so, the button are disabled so that the player cant keep playing.\r\n  componentDidUpdate(_prevProps, prevState) {\r\n    if (prevState.winner !== this.state.winner) {\r\n      if (this.state.winner === true) {\r\n        this.setState({ disabled: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n  handleReset() {\r\n    this.setState({ disabled: false });\r\n    let clearbuttons = document.querySelectorAll(\"input\"); // creer un constant \"clearbuttons\" pour choisir tous les elements \"input\"\r\n    clearbuttons.forEach((button) => {\r\n      if (button.value !== \"RESET\" && button.value !== \"RESTART\") {  //si les boutons ou les inputs contiennent Reset ou Restart, on efface pas leur contenu.\r\n        button.value = \"\"; //les valeurs dans les boutons sont vides \r\n        button.style.background = \"transparent\"; // elever les coleurs quand les lignes gagnants.\r\n      }\r\n    });\r\n    this.setState({\r\n      checkedBtnPlayer1: [], //l'historique de joueur 1\r\n      checkedBtnPlayer2: [], //l'historique de joueur 2\r\n      clickedBtns: [], //l'historique de tous les boutons cliques\r\n      player1Turn: true, //player1Turn retourne a sa position initiale\r\n      winner: false, // le gagnant retourne a sa position initiale\r\n    });\r\n    this.setState({\r\n      displayP2Won: \"none\", // effacer les phrases dans html dans le case quelqu'un a gagne, ou un match nul, ou pour le bouton Restart\r\n      displayP1Won: \"none\",\r\n      displayDraw: \"none\",\r\n      displayRESTART: \"none\",\r\n    });\r\n\r\n    console.log(\"RESET\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"container-lg \">\r\n        <h1 className=\"title text-center display-2\">T<span className=\"span-title\">i</span>c T<span className=\"span-title-red\">a</span>c <span className=\"span-bg-black\"> Toe</span></h1>\r\n        <div className=\"row justify-content-center \">\r\n          <div className=\"col-lg-2 col-md-6  order-1 order-lg-1 rounded p-3 text-center m-2 d-flex flex-column justify-content-center align-items-center\">\r\n            {this.state.player1Turn ? (\r\n              <p>\r\n                Your turn <span className=\"red\">Player1</span> : <span className=\"span-title-red \">X</span> \r\n              </p>\r\n            ) : (\r\n              <p>\r\n                Your turn <span className=\"green\">Player2</span> :<span className=\"span-title\">O</span> \r\n              </p>\r\n            )}\r\n            <input\r\n              className={`btn btn-dark m-1 col-lg-12 col-md-6 col-sm-6 col-6`}\r\n              type=\"reset\"\r\n              value=\"RESET\"\r\n              onClick={this.handleReset}\r\n            />\r\n          </div>\r\n          <div className=\"col-lg-5 col-md-6  order-3 order-lg-3 rounded p-3 m-2  d-flex flex-column  justify-content-center align-items-center\">\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"0\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"1\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"2\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"3\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"4\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"5\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"6\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"7\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"8\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n            {/* <p className=\"warning\" style={{ display: this.state.display }}>\r\n               Box already ticked ! Please, select another one.\r\n            </p> */}\r\n          </div>\r\n          <div className=\"col-lg-2 col-md-6 order-3 order-lg-3 rounded p-3 m-2 d-flex flex-column justify-content-center align-items-center\">\r\n            <p style={{ display: this.state.displayP2Won }}>Player 2 won !!</p>\r\n            <p style={{ display: this.state.displayP1Won }}>Player 1 won !!</p>\r\n            <p style={{ display: this.state.displayDraw }}>\r\n              It's a draw... Play again?\r\n            </p>\r\n            <input\r\n              className={`btn m-1 col-lg-12 col-md-6 col-sm-6 col-6 btn-danger`}\r\n              style={{ display: this.state.displayRESTART }}\r\n              type=\"button\"\r\n              value=\"RESTART\"\r\n              onClick={this.handleReset}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row div-warning\">\r\n          <p className=\"warning align-center\" style={{ display: this.state.display }}>\r\n                Box already ticked ! Please, select another one.\r\n              </p>\r\n        </div>\r\n\r\n        <div className=\"row div-concats\">\r\n          <p className=\"align-center concats\"> &copy; Made by Les Concats \r\n          <br></br>\r\n           <Icon icon=\"emojione:cat-face\"  inline={true} className=\"cat\"/> \r\n          <Icon icon=\"emojione:cat-face\"  inline={true} className=\"cat\"/>\r\n          <Icon icon=\"emojione:cat-face\"  inline={true} className=\"cat\"/>\r\n          <Icon icon=\"emojione:cat-face\"  inline={true} className=\"cat\"/>\r\n           </p>\r\n          \r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\r\n// Components JS\r\nimport Grid from \"./components/Grid\";\r\n// CSS\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"container mt-4\">\r\n        <Grid />\r\n      </section>\r\n    );\r\n  }\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}